// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Generator block for generating the Prisma client in JavaScript
generator client {
  provider = "prisma-client-js"
}

// Datasource block for connecting to MongoDB, using the URL from the environment variables
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Model representing the "User" entity in the database
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String? // User's name
  email          String?   @unique // User's email address, unique constraint
  emailVerified  DateTime? // Date and time when the email was verified
  image          String? // URL for the user's profile image
  hashedPassword String? // Hashed password for security
  createdAt      DateTime  @default(now()) // Date and time when the user was created
  updatedAt      DateTime  @updatedAt // Date and time when the user was last updated
  favoriteIds    String[]  @db.ObjectId // Array of favorite listing IDs

  // Relationships with other models
  accounts     Account[] // One-to-many relationship with the "Account" model
  listings     Listing[] // One-to-many relationship with the "Listing" model
  reservations Reservation[] // One-to-many relationship with the "Reservation" model
}

// Model representing the "Account" entity in the database
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId // Foreign key referencing the "User" model
  type              String // Type of the account
  provider          String // Provider of the account
  providerAccountId String // Unique identifier provided by the account's provider
  refresh_token     String? @db.String // Refresh token for the account
  access_token      String? @db.String // Access token for the account
  expires_at        Int? // Expiry timestamp for the access token
  token_type        String? // Type of the access token
  scope             String? // Scope of the access token
  id_token          String? @db.String // ID token for the account
  session_state     String? // Session state for the account

  // Relationship with the "User" model
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Unique constraint for provider and providerAccountId combination
}

// Model representing the "Listing" entity in the database
model Listing {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String // Title of the listing
  description   String // Description of the listing
  imageSrc      String // URL for the listing image
  createAt      DateTime @default(now()) // Date and time when the listing was created
  category      String // Category of the listing
  roomCount     Int // Number of rooms in the listing
  bathRoomCount Int // Number of bathrooms in the listing
  guestCount    Int // Number of guests the listing can accommodate
  locationValue String // Location value of the listing
  userId        String   @db.ObjectId // Foreign key referencing the "User" model
  price         Int // Price of the listing

  // Relationship with the "User" model
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[] // One-to-many relationship with the "Reservation" model
}

// Model representing the "Reservation" entity in the database
model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?  @db.ObjectId // Foreign key referencing the "User" model
  Listing    Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId  String?  @db.ObjectId // Foreign key referencing the "Listing" model
  startDate  DateTime // Start date of the reservation
  endDate    DateTime // End date of the reservation
  totalPrice Int // Total price of the reservation
  createdAt  DateTime @default(now()) // Date and time when the reservation was created
}
